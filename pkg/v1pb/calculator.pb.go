// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/v1pb/calculator.proto

package v1pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Operator int32

const (
	UNDEFINED Operator = 0
	ADD       Operator = 1
	SUBTRACT  Operator = 2
	MULTIPLY  Operator = 3
	DIVIDE    Operator = 4
)

var Operator_name = map[int32]string{
	0: "UNDEFINED",
	1: "ADD",
	2: "SUBTRACT",
	3: "MULTIPLY",
	4: "DIVIDE",
}

var Operator_value = map[string]int32{
	"UNDEFINED": 0,
	"ADD":       1,
	"SUBTRACT":  2,
	"MULTIPLY":  3,
	"DIVIDE":    4,
}

func (Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce4015ff54a8a5a4, []int{0}
}

type Operand struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Operand) Reset()      { *m = Operand{} }
func (*Operand) ProtoMessage() {}
func (*Operand) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce4015ff54a8a5a4, []int{0}
}
func (m *Operand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operand.Merge(m, src)
}
func (m *Operand) XXX_Size() int {
	return m.Size()
}
func (m *Operand) XXX_DiscardUnknown() {
	xxx_messageInfo_Operand.DiscardUnknown(m)
}

var xxx_messageInfo_Operand proto.InternalMessageInfo

func (m *Operand) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Token struct {
	// Types that are valid to be assigned to Token:
	//	*Token_Operand
	//	*Token_Operator
	Token isToken_Token `protobuf_oneof:"token"`
}

func (m *Token) Reset()      { *m = Token{} }
func (*Token) ProtoMessage() {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce4015ff54a8a5a4, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

type isToken_Token interface {
	isToken_Token()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Token_Operand struct {
	Operand *Operand `protobuf:"bytes,1,opt,name=operand,proto3,oneof"`
}
type Token_Operator struct {
	Operator Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=com.github.charithe.calculator.v1.Operator,oneof"`
}

func (*Token_Operand) isToken_Token()  {}
func (*Token_Operator) isToken_Token() {}

func (m *Token) GetToken() isToken_Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Token) GetOperand() *Operand {
	if x, ok := m.GetToken().(*Token_Operand); ok {
		return x.Operand
	}
	return nil
}

func (m *Token) GetOperator() Operator {
	if x, ok := m.GetToken().(*Token_Operator); ok {
		return x.Operator
	}
	return UNDEFINED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Token) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Token_OneofMarshaler, _Token_OneofUnmarshaler, _Token_OneofSizer, []interface{}{
		(*Token_Operand)(nil),
		(*Token_Operator)(nil),
	}
}

func _Token_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Token)
	// token
	switch x := m.Token.(type) {
	case *Token_Operand:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Operand); err != nil {
			return err
		}
	case *Token_Operator:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Operator))
	case nil:
	default:
		return fmt.Errorf("Token.Token has unexpected type %T", x)
	}
	return nil
}

func _Token_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Token)
	switch tag {
	case 1: // token.operand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Operand)
		err := b.DecodeMessage(msg)
		m.Token = &Token_Operand{msg}
		return true, err
	case 2: // token.operator
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Token = &Token_Operator{Operator(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Token_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Token)
	// token
	switch x := m.Token.(type) {
	case *Token_Operand:
		s := proto.Size(x.Operand)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Token_Operator:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Operator))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EvaluateStreamRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *EvaluateStreamRequest) Reset()      { *m = EvaluateStreamRequest{} }
func (*EvaluateStreamRequest) ProtoMessage() {}
func (*EvaluateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce4015ff54a8a5a4, []int{2}
}
func (m *EvaluateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateStreamRequest.Merge(m, src)
}
func (m *EvaluateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateStreamRequest proto.InternalMessageInfo

func (m *EvaluateStreamRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type EvaluateStreamResponse struct {
	Result float64 `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *EvaluateStreamResponse) Reset()      { *m = EvaluateStreamResponse{} }
func (*EvaluateStreamResponse) ProtoMessage() {}
func (*EvaluateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce4015ff54a8a5a4, []int{3}
}
func (m *EvaluateStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateStreamResponse.Merge(m, src)
}
func (m *EvaluateStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateStreamResponse proto.InternalMessageInfo

func (m *EvaluateStreamResponse) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type EvaluateBatchRequest struct {
	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *EvaluateBatchRequest) Reset()      { *m = EvaluateBatchRequest{} }
func (*EvaluateBatchRequest) ProtoMessage() {}
func (*EvaluateBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce4015ff54a8a5a4, []int{4}
}
func (m *EvaluateBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateBatchRequest.Merge(m, src)
}
func (m *EvaluateBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateBatchRequest proto.InternalMessageInfo

func (m *EvaluateBatchRequest) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type EvaluateBatchResponse struct {
	Result float64 `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *EvaluateBatchResponse) Reset()      { *m = EvaluateBatchResponse{} }
func (*EvaluateBatchResponse) ProtoMessage() {}
func (*EvaluateBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce4015ff54a8a5a4, []int{5}
}
func (m *EvaluateBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateBatchResponse.Merge(m, src)
}
func (m *EvaluateBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateBatchResponse proto.InternalMessageInfo

func (m *EvaluateBatchResponse) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterEnum("com.github.charithe.calculator.v1.Operator", Operator_name, Operator_value)
	proto.RegisterType((*Operand)(nil), "com.github.charithe.calculator.v1.Operand")
	proto.RegisterType((*Token)(nil), "com.github.charithe.calculator.v1.Token")
	proto.RegisterType((*EvaluateStreamRequest)(nil), "com.github.charithe.calculator.v1.EvaluateStreamRequest")
	proto.RegisterType((*EvaluateStreamResponse)(nil), "com.github.charithe.calculator.v1.EvaluateStreamResponse")
	proto.RegisterType((*EvaluateBatchRequest)(nil), "com.github.charithe.calculator.v1.EvaluateBatchRequest")
	proto.RegisterType((*EvaluateBatchResponse)(nil), "com.github.charithe.calculator.v1.EvaluateBatchResponse")
}

func init() { proto.RegisterFile("pkg/v1pb/calculator.proto", fileDescriptor_ce4015ff54a8a5a4) }

var fileDescriptor_ce4015ff54a8a5a4 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xef, 0x25, 0xcd, 0x0f, 0x1e, 0xb4, 0xb2, 0x4e, 0xa5, 0x0a, 0x1d, 0x8e, 0xe0, 0x29,
	0x2a, 0x92, 0x43, 0xc3, 0x40, 0x61, 0x40, 0x34, 0x75, 0xaa, 0x1a, 0x95, 0x82, 0xdc, 0x84, 0x5f,
	0xdb, 0xc5, 0x9c, 0x9a, 0xaa, 0x69, 0xce, 0x9c, 0xcf, 0x99, 0x11, 0x0b, 0x2b, 0x3b, 0x23, 0x0b,
	0x7f, 0x0a, 0x63, 0xc6, 0x8e, 0xc4, 0x59, 0x18, 0xfb, 0x27, 0xa0, 0x38, 0x97, 0xd2, 0x20, 0x04,
	0x49, 0x37, 0x3f, 0xe9, 0x7d, 0x3f, 0xfe, 0xbc, 0x77, 0x7a, 0x78, 0x2b, 0x3c, 0x39, 0xaa, 0xf6,
	0x37, 0xc3, 0x76, 0x35, 0xe0, 0xdd, 0x20, 0xee, 0x72, 0x2d, 0x95, 0x13, 0x2a, 0xa9, 0x25, 0xbd,
	0x13, 0xc8, 0x53, 0xe7, 0xe8, 0x58, 0x77, 0xe2, 0xb6, 0x13, 0x74, 0xb8, 0x3a, 0xd6, 0x1d, 0xe1,
	0x5c, 0xea, 0xea, 0x6f, 0xda, 0xb7, 0xb1, 0xf0, 0x3c, 0x14, 0x8a, 0xf7, 0xde, 0xd1, 0x55, 0xcc,
	0xf5, 0x79, 0x37, 0x16, 0x25, 0x28, 0x43, 0x05, 0xfc, 0x49, 0x61, 0x7f, 0x05, 0xcc, 0x35, 0xe5,
	0x89, 0xe8, 0xd1, 0x5d, 0x2c, 0xc8, 0x49, 0x6b, 0xda, 0x71, 0xbd, 0xb6, 0xe1, 0xfc, 0x97, 0xef,
	0x18, 0xf8, 0x1e, 0xf1, 0xa7, 0x61, 0xea, 0x61, 0x31, 0xfd, 0xd4, 0x52, 0x95, 0x32, 0x65, 0xa8,
	0xac, 0xd4, 0xee, 0xce, 0x0b, 0xd2, 0x52, 0xed, 0x11, 0xff, 0x22, 0x5e, 0x2f, 0x60, 0x4e, 0x8f,
	0xdd, 0xec, 0x57, 0x78, 0xb3, 0x31, 0xf6, 0xe5, 0x5a, 0x1c, 0x6a, 0x25, 0xf8, 0xa9, 0x2f, 0xde,
	0xc7, 0x22, 0xd2, 0xf4, 0xb1, 0xe9, 0x30, 0xca, 0x95, 0x39, 0xfe, 0x94, 0x4e, 0xeb, 0x1b, 0xf0,
	0x3d, 0x5c, 0xfb, 0x13, 0x1c, 0x85, 0xb2, 0x17, 0x09, 0xba, 0x86, 0x79, 0x25, 0xa2, 0xb8, 0xab,
	0xcd, 0xbe, 0x4c, 0x65, 0xbf, 0xc6, 0xd5, 0x69, 0xa2, 0xce, 0x75, 0xd0, 0x99, 0x9a, 0x3c, 0xc1,
	0x7c, 0x8a, 0x8c, 0x4a, 0x50, 0xce, 0x2e, 0xa4, 0x62, 0x72, 0x76, 0xf5, 0xf7, 0x90, 0x86, 0xfc,
	0x6f, 0x95, 0x8d, 0xa7, 0x58, 0x9c, 0xae, 0x8d, 0x2e, 0xe3, 0xb5, 0xd6, 0x81, 0xdb, 0xd8, 0xf5,
	0x0e, 0x1a, 0xae, 0x45, 0x68, 0x01, 0xb3, 0xdb, 0xae, 0x6b, 0x01, 0xbd, 0x81, 0xc5, 0xc3, 0x56,
	0xbd, 0xe9, 0x6f, 0xef, 0x34, 0xad, 0xcc, 0xb8, 0x7a, 0xd6, 0xda, 0x6f, 0x7a, 0x2f, 0xf6, 0xdf,
	0x58, 0x59, 0x8a, 0x98, 0x77, 0xbd, 0x97, 0x9e, 0xdb, 0xb0, 0x96, 0x6a, 0x5f, 0x32, 0x88, 0x3b,
	0x17, 0x72, 0xf4, 0x13, 0xe0, 0xca, 0xec, 0x62, 0xe8, 0xd6, 0x1c, 0x03, 0xfd, 0xf5, 0x91, 0xd6,
	0x1f, 0x5e, 0x21, 0x39, 0x19, 0xbd, 0x02, 0xf4, 0x23, 0xe0, 0xf2, 0xcc, 0x5a, 0xe8, 0x83, 0x05,
	0x70, 0x97, 0x9f, 0x68, 0x7d, 0x6b, 0xf1, 0xe0, 0x44, 0xa3, 0xfe, 0x68, 0x30, 0x64, 0xe4, 0x6c,
	0xc8, 0xc8, 0xf9, 0x90, 0xc1, 0x87, 0x84, 0xc1, 0xb7, 0x84, 0xc1, 0xf7, 0x84, 0xc1, 0x20, 0x61,
	0xf0, 0x23, 0x61, 0xf0, 0x33, 0x61, 0xe4, 0x3c, 0x61, 0xf0, 0x79, 0xc4, 0xc8, 0x60, 0xc4, 0xc8,
	0xd9, 0x88, 0x91, 0xb7, 0x4b, 0xe3, 0xb3, 0x6d, 0xe7, 0xd3, 0x63, 0xbd, 0xff, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x47, 0xfd, 0x55, 0x2c, 0xc9, 0x03, 0x00, 0x00,
}

func (x Operator) String() string {
	s, ok := Operator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Operand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operand)
	if !ok {
		that2, ok := that.(Operand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Token == nil {
		if this.Token != nil {
			return false
		}
	} else if this.Token == nil {
		return false
	} else if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *Token_Operand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token_Operand)
	if !ok {
		that2, ok := that.(Token_Operand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	return true
}
func (this *Token_Operator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token_Operator)
	if !ok {
		that2, ok := that.(Token_Operator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	return true
}
func (this *EvaluateStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateStreamRequest)
	if !ok {
		that2, ok := that.(EvaluateStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *EvaluateStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateStreamResponse)
	if !ok {
		that2, ok := that.(EvaluateStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *EvaluateBatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateBatchRequest)
	if !ok {
		that2, ok := that.(EvaluateBatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if !this.Tokens[i].Equal(that1.Tokens[i]) {
			return false
		}
	}
	return true
}
func (this *EvaluateBatchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateBatchResponse)
	if !ok {
		that2, ok := that.(EvaluateBatchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *Operand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1pb.Operand{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Token) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1pb.Token{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Token_Operand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1pb.Token_Operand{` +
		`Operand:` + fmt.Sprintf("%#v", this.Operand) + `}`}, ", ")
	return s
}
func (this *Token_Operator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1pb.Token_Operator{` +
		`Operator:` + fmt.Sprintf("%#v", this.Operator) + `}`}, ", ")
	return s
}
func (this *EvaluateStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1pb.EvaluateStreamRequest{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1pb.EvaluateStreamResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateBatchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1pb.EvaluateBatchRequest{")
	if this.Tokens != nil {
		s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateBatchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1pb.EvaluateBatchResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCalculator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	EvaluateStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_EvaluateStreamClient, error)
	EvaluateBatch(ctx context.Context, in *EvaluateBatchRequest, opts ...grpc.CallOption) (*EvaluateBatchResponse, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) EvaluateStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_EvaluateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[0], "/com.github.charithe.calculator.v1.Calculator/EvaluateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorEvaluateStreamClient{stream}
	return x, nil
}

type Calculator_EvaluateStreamClient interface {
	Send(*EvaluateStreamRequest) error
	CloseAndRecv() (*EvaluateStreamResponse, error)
	grpc.ClientStream
}

type calculatorEvaluateStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorEvaluateStreamClient) Send(m *EvaluateStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorEvaluateStreamClient) CloseAndRecv() (*EvaluateStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EvaluateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) EvaluateBatch(ctx context.Context, in *EvaluateBatchRequest, opts ...grpc.CallOption) (*EvaluateBatchResponse, error) {
	out := new(EvaluateBatchResponse)
	err := c.cc.Invoke(ctx, "/com.github.charithe.calculator.v1.Calculator/EvaluateBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	EvaluateStream(Calculator_EvaluateStreamServer) error
	EvaluateBatch(context.Context, *EvaluateBatchRequest) (*EvaluateBatchResponse, error)
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_EvaluateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).EvaluateStream(&calculatorEvaluateStreamServer{stream})
}

type Calculator_EvaluateStreamServer interface {
	SendAndClose(*EvaluateStreamResponse) error
	Recv() (*EvaluateStreamRequest, error)
	grpc.ServerStream
}

type calculatorEvaluateStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorEvaluateStreamServer) SendAndClose(m *EvaluateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorEvaluateStreamServer) Recv() (*EvaluateStreamRequest, error) {
	m := new(EvaluateStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_EvaluateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).EvaluateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.charithe.calculator.v1.Calculator/EvaluateBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).EvaluateBatch(ctx, req.(*EvaluateBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.charithe.calculator.v1.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluateBatch",
			Handler:    _Calculator_EvaluateBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EvaluateStream",
			Handler:       _Calculator_EvaluateStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/v1pb/calculator.proto",
}

func (m *Operand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	return i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		nn1, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Token_Operand) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Operand != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCalculator(dAtA, i, uint64(m.Operand.Size()))
		n2, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Token_Operator) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintCalculator(dAtA, i, uint64(m.Operator))
	return i, nil
}
func (m *EvaluateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCalculator(dAtA, i, uint64(m.Token.Size()))
		n3, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *EvaluateStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Result))))
		i += 8
	}
	return i, nil
}

func (m *EvaluateBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, msg := range m.Tokens {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCalculator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EvaluateBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Result))))
		i += 8
	}
	return i, nil
}

func encodeVarintCalculator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Operand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		n += m.Token.Size()
	}
	return n
}

func (m *Token_Operand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovCalculator(uint64(l))
	}
	return n
}
func (m *Token_Operator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCalculator(uint64(m.Operator))
	return n
}
func (m *EvaluateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovCalculator(uint64(l))
	}
	return n
}

func (m *EvaluateStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 9
	}
	return n
}

func (m *EvaluateBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovCalculator(uint64(l))
		}
	}
	return n
}

func (m *EvaluateBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 9
	}
	return n
}

func sovCalculator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCalculator(x uint64) (n int) {
	return sovCalculator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Operand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operand{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Token{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token_Operand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Token_Operand{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "Operand", "Operand", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token_Operator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Token_Operator{`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateStreamRequest{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "Token", "Token", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateStreamResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateBatchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateBatchRequest{`,
		`Tokens:` + strings.Replace(fmt.Sprintf("%v", this.Tokens), "Token", "Token", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateBatchResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateBatchResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCalculator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Operand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Token = &Token_Operand{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var v Operator
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Operator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Token = &Token_Operator{v}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Result = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalculator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalculator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &Token{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Result = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCalculator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculator
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCalculator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCalculator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCalculator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCalculator
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCalculator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculator   = fmt.Errorf("proto: integer overflow")
)
